#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = LL
#RegularDefinitions
L  : [A-Za-z]
D  : [0-9]
WS : [\ \t\n\r] //simbolos especiais e branco
COMMENT : "(*" [^ "*" ]* "*)"  //comentário

#Tokens
//pontuação
"("
")"
","
";"
"."
":"
":="
"="
"<"
">"
">="
"<="
"<>"
"+"
"-"
"*"
"/"

//tokens
id : {L} ( {L} | {D} | _ )*
num : {D}+ //um ou mais dígitos
literal: ( {L} | {D} ) * //nao eh a definicao correta, mas o lexico do gals nao eh usado

//palavras chave
program = id : "program"
const = id : "const"
var = id : "var"
procedure = id : "procedure"
begin = id : "begin"
end = id : "end"
integer = id : "integer"
call = id : "call"
if = id : "if"
then = id : "then"
else = id : "else"
while = id : "while"
do = id : "do"
repeat = id : "repeat"
until = id : "until"
readln = id : "readln"
writeln = id : "writeln"
or = id : "or"
and = id : "and"
not = id : "not"
for = id : "for"
to = id : "to"
case = id : "case"
of = id : "of"


//ignorar espaços em branco, caracteres especiais e comentários
 : {WS}*
 :! {COMMENT}

#NonTerminals
<PROGRAMA>
<BLOCO>
<LID>
<REPIDENT>
<DCLCONST>
<LDCONST>
<DCLVAR>
<LDVAR>
<TIPO>
<DCLPROC>
<DEFPAR>
<CORPO>
<REPCOMANDO>
<COMANDO>
<PARAMETROS>
<REPPAR>
<ELSEPARTE>
<VARIAVEL>
<REPVARIAVEL>
<ITEMSAIDA>
<REPITEM>
<EXPRESSAO>
<REPEXPSIMP>
<EXPSIMP>
<REPEXP>
<TERMO>
<REPTERMO>
<FATOR>
<CONDCASE>
<CONTCASE>
<RPINTEIRO>
#Grammar
<PROGRAMA> ::= program id ";" <BLOCO> ".";
<BLOCO> ::= <DCLCONST> <DCLVAR> <DCLPROC> <CORPO>;
<LID> ::= id <REPIDENT>;
<REPIDENT> ::= î;
<REPIDENT> ::= "," id <REPIDENT>;
<DCLCONST> ::= const id "=" num ";" <LDCONST>;
<LDCONST> ::= î;
<LDCONST> ::= id "=" num ";" <LDCONST>;
<DCLCONST> ::= î;
<DCLVAR> ::= var <LID> ":" <TIPO> ";" <LDVAR>;
<LDVAR> ::= î;
<LDVAR> ::= <LID> ":" <TIPO> ";" <LDVAR>;
<DCLVAR> ::= î;
<TIPO> ::= integer;
<DCLPROC> ::= procedure id <DEFPAR> ";" <BLOCO> ";" <DCLPROC> ;
<DCLPROC> ::= î;
<DEFPAR> ::= î;
<DEFPAR> ::= "(" <LID> ":" integer ")";
<CORPO> ::= begin <COMANDO> <REPCOMANDO> end;
<REPCOMANDO> ::= î;
<REPCOMANDO> ::= ";" <COMANDO> <REPCOMANDO>;
<COMANDO> ::= id ":=" <EXPRESSAO>;
<COMANDO> ::= <CORPO>;
<COMANDO> ::= î;
<COMANDO> ::= call id <PARAMETROS>;
<PARAMETROS> ::= î;
<PARAMETROS> ::= "(" <EXPRESSAO> <REPPAR> ")";
<REPPAR> ::= î;
<REPPAR> ::= "," <EXPRESSAO> <REPPAR>;
<COMANDO> ::= if <EXPRESSAO> then <COMANDO> <ELSEPARTE>;
<ELSEPARTE> ::= î;
<ELSEPARTE> ::= else <COMANDO>;
<COMANDO> ::= while <EXPRESSAO> do <COMANDO>;
<COMANDO> ::= repeat <COMANDO> until <EXPRESSAO>;
<COMANDO> ::= readln "(" <VARIAVEL> <REPVARIAVEL> ")";
<VARIAVEL> ::= id;
<REPVARIAVEL>::= î;
<REPVARIAVEL>::= "," <VARIAVEL> <REPVARIAVEL>;
<COMANDO> ::= writeln "(" <ITEMSAIDA> <REPITEM> ")";
<ITEMSAIDA> ::= literal;
<ITEMSAIDA> ::= <EXPRESSAO>;
<REPITEM> ::= î;
<REPITEM> ::= "," <ITEMSAIDA> <REPITEM>;
<COMANDO> ::= case <EXPRESSAO> of <CONDCASE> end;
<CONDCASE> ::= num <RPINTEIRO> ":" <COMANDO> <CONTCASE>;
<RPINTEIRO> ::= "," num <RPINTEIRO>;
<RPINTEIRO> ::= î ;
<CONTCASE> ::= î ;
<CONTCASE> ::= ";" <CONDCASE>;
<COMANDO> ::= for id ":=" <EXPRESSAO> to <EXPRESSAO> do <COMANDO> ;
<EXPRESSAO> ::= <EXPSIMP> <REPEXPSIMP>;
<REPEXPSIMP> ::= î;
<REPEXPSIMP> ::= "=" <EXPSIMP> ;
<REPEXPSIMP> ::= "<" <EXPSIMP> ;
<REPEXPSIMP> ::= ">" <EXPSIMP> ;
<REPEXPSIMP> ::= ">=" <EXPSIMP> ;
<REPEXPSIMP> ::= "<=" <EXPSIMP> ;
<REPEXPSIMP> ::= "<>" <EXPSIMP> ;
<EXPSIMP> ::= "+" <TERMO> <REPEXP> ;
<EXPSIMP> ::= "-" <TERMO> <REPEXP> ;
<EXPSIMP> ::= <TERMO> <REPEXP> ; //hmmmmm
<REPEXP> ::= "+" <TERMO> <REPEXP>;
<REPEXP> ::= "-" <TERMO> <REPEXP>;
<REPEXP> ::= or <TERMO> <REPEXP>;
<REPEXP> ::= î;
<TERMO> ::= <FATOR> <REPTERMO>;
<REPTERMO> ::= î;
<REPTERMO> ::= "*" <FATOR> <REPTERMO>;
<REPTERMO> ::= "/" <FATOR> <REPTERMO>;
<REPTERMO> ::= and <FATOR> <REPTERMO>;
<FATOR> ::= num;
<FATOR> ::= "(" <EXPRESSAO> ")" ;
<FATOR> ::= not <FATOR> ;
<FATOR> ::= <VARIAVEL>;
